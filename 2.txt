---
- name: Install/upgrade Checkov from JFrog (.zip package)
  hosts: all
  become: true
  gather_facts: yes

  vars:
    # === Required: set these via --extra-vars or inventory/group_vars ===
    checkov_version: "3.2.0"       # desired version
    jfrog_base_url: "https://yourcompany.jfrog.io/artifactory"
    jfrog_repo_path: "generic-local/checkov"
    jfrog_filename: "checkov-{{ checkov_version }}.zip"

    # Auth (API key preferred)
    jfrog_api_key: "{{ lookup('env', 'JFROG_API_KEY') | default('', true) }}"
    jfrog_username: "{{ lookup('env', 'JFROG_USERNAME') | default('', true) }}"
    jfrog_password: "{{ lookup('env', 'JFROG_PASSWORD') | default('', true) }}"

    install_dir: "/opt/checkov"
    target_dir: "{{ install_dir }}/checkov-{{ checkov_version }}"
    symlink_bin: "/usr/local/bin/checkov"

    download_dir: "/tmp/checkov_install"
    download_path: "{{ download_dir }}/{{ jfrog_filename }}"
    download_url: "{{ jfrog_base_url.rstrip('/') }}/{{ jfrog_repo_path.strip('/') }}/{{ jfrog_filename }}"

  pre_tasks:
    - name: Ensure unzip is present
      package:
        name: unzip
        state: present

    - name: Create temp download directory
      file:
        path: "{{ download_dir }}"
        state: directory
        mode: "0755"

    - name: Detect installed Checkov version (if any)
      shell: |
        set -o pipefail
        if [ -x "{{ symlink_bin }}" ]; then
          {{ symlink_bin }} --version 2>/dev/null | sed -E 's/^[Vv]?(Checkov)?[[:space:]]*[Vv]?(ersion)?[[:space:]]*//'
        else
          echo "NOT_INSTALLED"
        fi
      args:
        executable: /bin/bash
      register: checkov_ver_cmd
      changed_when: false

    - name: Normalize installed version fact
      set_fact:
        checkov_installed_version: "{{ (checkov_ver_cmd.stdout | trim) if (checkov_ver_cmd.stdout | trim) != 'NOT_INSTALLED' else None }}"

    - name: Decide if install/upgrade is needed
      set_fact:
        need_install: "{{ (checkov_installed_version is not defined) or (checkov_installed_version is none) or (checkov_installed_version != checkov_version) }}"

  tasks:
    - name: Show current/desired versions
      debug:
        msg:
          - "Installed: {{ checkov_installed_version | default('none') }}"
          - "Desired:   {{ checkov_version }}"
          - "Need install/upgrade: {{ need_install }}"

    - name: Build JFrog headers
      set_fact:
        jfrog_headers: >-
          {{ (jfrog_api_key | length > 0) | ternary({'X-JFrog-Art-Api': jfrog_api_key}, {}) }}

    - name: Check artifact exists in JFrog (HEAD)
      uri:
        url: "{{ download_url }}"
        method: HEAD
        headers: "{{ jfrog_headers }}"
        url_username: "{{ (jfrog_headers | length == 0 and jfrog_username | length > 0) | ternary(jfrog_username, omit) }}"
        url_password: "{{ (jfrog_headers | length == 0 and jfrog_password | length > 0) | ternary(jfrog_password, omit) }}"
        force_basic_auth: yes
        status_code: [200]
      register: head_result
      failed_when: head_result.status not in [200]
      when: need_install

    - name: Download Checkov zip from JFrog
      get_url:
        url: "{{ download_url }}"
        dest: "{{ download_path }}"
        mode: "0644"
        headers: "{{ jfrog_headers }}"
        url_username: "{{ (jfrog_headers | length == 0 and jfrog_username | length > 0) | ternary(jfrog_username, omit) }}"
        url_password: "{{ (jfrog_headers | length == 0 and jfrog_password | length > 0) | ternary(jfrog_password, omit) }}"
        force_basic_auth: yes
      when: need_install

    - name: Create install directory
      file:
        path: "{{ install_dir }}"
        state: directory
        mode: "0755"
      when: need_install

    - name: Unzip Checkov into target dir
      unarchive:
        src: "{{ download_path }}"
        dest: "{{ target_dir }}"
        remote_src: yes
        creates: "{{ target_dir }}/checkov"
      when: need_install

    - name: Make checkov executable
      file:
        path: "{{ target_dir }}/checkov"
        mode: "0755"
      when: need_install

    - name: Create/Update symlink
      file:
        src: "{{ target_dir }}/checkov"
        dest: "{{ symlink_bin }}"
        state: link
        force: yes
      when: need_install

    - name: Re-check installed Checkov version
      shell: |
        set -o pipefail
        {{ symlink_bin }} --version 2>/dev/null | sed -E 's/^[Vv]?(Checkov)?[[:space:]]*[Vv]?(ersion)?[[:space:]]*//'
      args:
        executable: /bin/bash
      register: checkov_ver_after
      changed_when: false

    - name: Assert desired version is installed
      assert:
        that:
          - checkov_ver_after.stdout | trim == checkov_version
        fail_msg: "Checkov {{ checkov_version }} did not install correctly. Got {{ checkov_ver_after.stdout | trim }}."
        success_msg: "Checkov {{ checkov_version }} installed successfully."
