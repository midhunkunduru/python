# ---------- Terraform via JFrog ----------
terraform_config_path: /etc/terraformrc
terraform_jfrog_enabled: true
terraform_jfrog_mirror_url: "https://jfrog.example.com/artifactory/terraform-registry"
terraform_jfrog_skip_tls_verify: false   # set true if using internal CA (or deploy CA)

# ---------- Filesystem pattern (adapt as needed) ----------
fs_dirs:
  - { path: "/opt/octopus", owner: "octopus", group: "octopus", mode: "0755" }
  - { path: "/opt/octopus/work", owner: "octopus", group: "octopus", mode: "0755" }
  - { path: "/var/log/octopus", owner: "octopus", group: "octopus", mode: "0755" }

# ---------- Octopus Worker/Tentacle ----------
octopus_user: octopus
octopus_group: octopus
octopus_home: /home/octopus

# Where to fetch the Linux Tentacle from (can be JFrog, not public internet)
tentacle_pkg_url: "https://jfrog.example.com/artifactory/octopus/Tentacle-linux-x64.tar.gz"
tentacle_install_dir: /opt/octopus/tentacle
tentacle_instance: "Worker"
octopus_server_url: "https://octopus.company.local"
octopus_server_api_key: "API-XXXXXXXXXXXXXXXXXXXXXXXX"   # store in AAP Credential, not here
octopus_space: "Default"
octopus_worker_pool: "Linux Workers"
tentacle_thumbprint: ""   # optional: leave empty for first-run register to return it

# ---------- PowerShell / Module Setup ----------
install_powershell: true
ps_modules_systemwide:
  - { name: "Pester", version: "latest" }
  - { name: "SqlServer", version: "latest" }
  - { name: "Az.Accounts", version: "latest" }

# If you already have an internal script that installs modules, host it in JFrog and set:
ps_custom_script_url: "https://jfrog.example.com/artifactory/scripts/install-psmodules.ps1"  # optional



---
- name: Install prereqs
  package:
    name:
      - tar
      - curl
      - gawk
      - libicu
    state: present

- name: Create install dir
  file:
    path: "{{ tentacle_install_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Download Tentacle tarball (from JFrog or internal)
  get_url:
    url: "{{ tentacle_pkg_url }}"
    dest: /tmp/Tentacle-linux-x64.tar.gz
    mode: '0644'
    force: yes

- name: Unpack Tentacle
  unarchive:
    src: /tmp/Tentacle-linux-x64.tar.gz
    dest: "{{ tentacle_install_dir }}"
    remote_src: yes
    creates: "{{ tentacle_install_dir }}/Tentacle"

- name: Symlink Tentacle to /usr/local/bin
  file:
    src: "{{ tentacle_install_dir }}/Tentacle"
    dest: /usr/local/bin/Tentacle
    state: link

- name: Create environment file for Tentacle
  template:
    src: tentacle.env.j2
    dest: /etc/sysconfig/tentacle
    owner: root
    group: root
    mode: '0644'

- name: First-time configure Tentacle instance
  command: >
    Tentacle configure --instance "{{ tentacle_instance }}"
    --home "{{ tentacle_install_dir }}/home"
    --app "{{ fs_dirs | selectattr('path','equalto','/opt/octopus/work') | list | first | default({'path':'/opt/octopus/work'}) | json_query('path') }}"
    --port "10933"
  args:
    creates: "{{ tentacle_install_dir }}/home/Instances/{{ tentacle_instance }}"
  register: tentacle_config

- name: Set permissions on working dirs to run as octopus
  file:
    path: "{{ item }}"
    owner: "{{ octopus_user }}"
    group: "{{ octopus_group }}"
    recurse: yes
  loop:
    - "{{ tentacle_install_dir }}/home"
    - "/opt/octopus/work"
    - "/var/log/octopus"

- name: Register Tentacle as a Worker with server
  command: >
    Tentacle register-worker
    --instance "{{ tentacle_instance }}"
    --server "{{ octopus_server_url }}"
    --apiKey "{{ octopus_server_api_key }}"
    --space "{{ octopus_space }}"
    --workerpool "{{ octopus_worker_pool }}"
  register: tentacle_register
  changed_when: "'already' not in tentacle_register.stdout | lower"
  environment:
    HOME: "{{ octopus_home }}"

- name: Create systemd override to run service as 'octopus' (not root)
  template:
    src: tentacle-override.conf.j2
    dest: /etc/systemd/system/tentacle.service.d/override.conf
  notify: Restart tentacle

- name: Enable & start Tentacle
  systemd:
    name: tentacle
    enabled: true
    state: started

- name: Show registration result (debug)
  debug:
    var: tentacle_register.stdout

# Handlers
- name: Restart tentacle
  systemd:
    name: tentacle
    state: restarted
