# transformer.py
from typing import Any, Dict, List
from types import parse_dt

def _to_list(v: Any) -> List[str]:
    if v is None: return []
    if isinstance(v, (list, tuple)):
        return [str(x).strip() for x in v if str(x).strip()]
    return [p.strip() for p in str(v).split(",") if p.strip()]

def explode_sprints(payload: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    Returns one row per SprintName. Handles comma-separated sprint names.
    """
    project = (payload.get("project") or {}).get("name")
    raw = (payload.get("sprint") or {}).get("name")
    names = _to_list(raw)
    if not names:
        names = [""]

    rows = []
    for sn in names:
        rows.append({
            "ProjectName": project,
            "SprintName": sn,
            "SprintBoardId": (payload.get("sprint") or {}).get("originBoardId"),
            "SprintStartDate": parse_dt((payload.get("sprint") or {}).get("startDate")),
            "SprintEndDate": parse_dt((payload.get("sprint") or {}).get("endDate")),
            "SprintIsStarted": (payload.get("sprint") or {}).get("isStarted"),
            "SprintIsClosed": (payload.get("sprint") or {}).get("isClosed"),
            "SprintCompletedDate": parse_dt((payload.get("sprint") or {}).get("completeDate")),
        })
    return rows


for s in explode_sprints(payload):
    if s.get("ProjectName") and s.get("SprintName"):
        sprint_rows.append(s)
    
